#!/usr/bin/env python3

import argparse
from contextlib import contextmanager
import datetime
from itertools import chain, groupby, repeat
import logging
import math
import os
import pickle
import signal
import subprocess
import sys
import tempfile

import numpy as np
import h5py

from scipy.interpolate import griddata
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

import freestream
import frzout

"""
Modified to use osu-hydro-pce!!
"""


def run_cmd(*args):
    """
    Run and log a subprocess.

    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        logging.debug(
            'command completed successfully:\n%s',
            proc.stdout.strip('\n')
        )
        return proc


class Parser(argparse.ArgumentParser):
    """
    ArgumentParser that parses files with 'key = value' lines.

    """
    def __init__(self, *args, fromfile_prefix_chars='@', **kwargs):
        super().__init__(
            *args, fromfile_prefix_chars=fromfile_prefix_chars, **kwargs
        )

    def convert_arg_line_to_args(self, arg_line):
        # split each line on = and prepend prefix chars to first arg so it is
        # parsed as a long option
        args = [i.strip() for i in arg_line.split('=', maxsplit=1)]
        args[0] = 2*self.prefix_chars[0] + args[0]
        return args


parser = Parser(
    usage=''.join('\n  %(prog)s ' + i for i in [
        '[options] <results_file>',
        'checkpoint <checkpoint_file>',
        '-h | --help',
    ]),
    description='''
Run relativistic heavy-ion collision events.

In the first form, run events according to the given options (below) and write
results to binary file <results_file>.

In the second form, run the event saved in <checkpoint_file>, previously
created by using the --checkpoint option and interrupting an event in progress.
''',
    formatter_class=argparse.RawDescriptionHelpFormatter
)


def parse_args_checkpoint():
    """
    Parse command line arguments according to the parser usage info.  Return a
    tuple (args, ic) where `args` is a normal argparse.Namespace and `ic` is
    either None or an np.array of the checkpointed initial condition.

    First, check for the special "checkpoint" form, and if found, load and
    return the args and checkpoint initial condition from the specified file.
    If not, let the parser object handle everything.

    This is a little hacky but it works fine.  Truth is, argparse can't do
    exactly what I want here.  I suppose `docopt` might be a better option, but
    it's not worth the effort to rewrite everything.

    """
    def usage():
        parser.print_usage(sys.stderr)
        sys.exit(2)

    if len(sys.argv) == 1:
        usage()

    if sys.argv[1] == 'checkpoint':
        if len(sys.argv) != 3:
            usage()

        path = sys.argv[2]

        try:
            with open(path, 'rb') as f:
                args, ic = pickle.load(f)
        except Exception as e:
            msg = '{}: {}'.format(type(e).__name__, e)
            if path not in msg:
                msg += ": '{}'".format(path)
            sys.exit(msg)

        # as a simple integrity check, require that the checkpoint file is
        # actually the file specified in the checkpointed args
        if os.path.abspath(path) != args.checkpoint:
            sys.exit(
                "checkpoint file path '{}' does not match saved path '{}'"
                .format(path, args.checkpoint)
            )

        return args, ic

    return parser.parse_args(), None


parser.add_argument(
    'results', type=os.path.abspath,
    help=argparse.SUPPRESS
)
parser.add_argument(
    '--buffering', type=int, default=0, metavar='INT',
    help='results file buffer size in bytes (default: no buffering)'
)
parser.add_argument(
    '--nevents', type=int, metavar='INT',
    help='number of events to run (default: run until interrupted)'
)
parser.add_argument(
    '--rankvar', metavar='VAR',
    help='environment variable containing process rank'
)
parser.add_argument(
    '--rankfmt', metavar='FMT',
    help='format string for rank integer'
)
parser.add_argument(
    '--tmpdir', type=os.path.abspath, metavar='PATH',
    help='temporary directory (default: {})'.format(tempfile.gettempdir())
)
parser.add_argument(
    '--checkpoint', type=os.path.abspath, metavar='PATH',
    help='checkpoint file [pickle format]'
)
parser.add_argument(
    '--particles', type=os.path.abspath, metavar='PATH',
    help='raw particle data file (default: do not save)'
)
parser.add_argument(
    '--logfile', type=os.path.abspath, metavar='PATH',
    help='log file (default: stdout)'
)
parser.add_argument(
    '--loglevel', choices={'debug', 'info', 'warning', 'error', 'critical'},
    default='info',
    help='log level (default: %(default)s)'
)
parser.add_argument(
    '--nucleon-width', type=float, default=.5, metavar='FLOAT',
    help='trento nucleon width [fm] (default: %(default)s fm)'
)
parser.add_argument(
    '--trento-args', default='Pb Pb', metavar='ARGS',
    help="arguments passed to trento (default: '%(default)s')"
)
parser.add_argument(
    '--tau-fs', type=float, default=.5, metavar='FLOAT',
    help='free streaming time [fm] (default: %(default)s fm)'
)
parser.add_argument(
    '--hydro-args', default='', metavar='ARGS',
    help='arguments passed to osu-hydro (default: empty)'
)
parser.add_argument(
    '--Tswitch', type=float, default=.150, metavar='FLOAT',
    help='particlization temperature [GeV] (default: %(default).3f GeV)'
)


class StopEvent(Exception):
    """ Raise to end an event early. """


def run_events(args, profile, results_file, temp_file, fugacity_file, particles_file=None, checkpoint_ic=None):
    """
    Run events as determined by user input:

        - Read options from `args`, as returned by `parser.parse_args()`.
        - Write results to binary file object `results_file`.
        - If `checkpoint_ic` is given, run only that IC.

    Return True if at least one event completed successfully, otherwise False.

    """
    # set the grid step size proportionally to the nucleon width
    grid_step = .6*args.nucleon_width
    # the "target" grid max: the grid shall be at least as large as the target
    grid_max_target = 15
    # next two lines set the number of grid cells and actual grid max,
    # which will be >= the target (same algorithm as trento)
    grid_n = math.ceil(2*grid_max_target/grid_step)
    grid_max = .5*grid_n*grid_step
    logging.info(
        'grid step = %.6f fm, n = %d, max = %.6f fm',
        grid_step, grid_n, grid_max
    )
    
    def _initial_conditions(nevents=10, initial_file='initial.hdf'):
        """
        Run trento and yield initial condition arrays.
    
        """
        try:
            os.remove(initial_file)
        except FileNotFoundError:
            pass
    
        yield np.load(profile)

    #pwd = os.getcwd()
    #initial_conditions = np.load(pwd + '/profile.npy')
    
    if checkpoint_ic is None:
        # if nevents was specified, generate that number of initial conditions
        # otherwise generate indefinitely
        initial_conditions = (
            chain.from_iterable(_initial_conditions() for _ in repeat(None))
            if args.nevents is None else
            _initial_conditions(args.nevents)
        )
    else:
        # just run the checkpointed IC
        initial_conditions = [checkpoint_ic]

    # create sampler HRG object (to be reused for all events)
    hrg_kwargs = dict(species='urqmd', res_width=True)
    hrg = frzout.HRG(args.Tswitch, **hrg_kwargs)

    # append switching energy density to hydro arguments
    eswitch = hrg.energy_density()
    hydro_args = [args.hydro_args, 'edec=0.1']

    # arguments for "coarse" hydro pre-runs
    # no viscosity, run down to low temperature 110 MeV
    hydro_args_coarse = [
        'etas_hrg=0 etas_min=0 etas_slope=0 zetas_max=0 zetas_width=0',
        'edec={}'.format(frzout.HRG(.110, **hrg_kwargs).energy_density())
    ]

    def run_hydro(fs, event_size, coarse=False, dt_ratio=.25):
        """
        Run the initial condition contained in FreeStreamer object `fs` through
        osu-hydro on a grid with approximate physical size `event_size` [fm].
        Return a dict of freeze-out surface data suitable for passing directly
        to frzout.Surface.

        Initial condition arrays are cropped or padded as necessary.

        If `coarse` is an integer > 1, use only every `coarse`th cell from the
        initial condition arrays (thus increasing the physical grid step size
        by a factor of `coarse`).  Ignore the user input `hydro_args` and
        instead run ideal hydro down to a low temperature.

        `dt_ratio` sets the timestep as a fraction of the spatial step
        (dt = dt_ratio * dxy).  The SHASTA algorithm requires dt_ratio < 1/2.

        """
        dxy = grid_step * (coarse or 1)
        ls = math.ceil(event_size/dxy)  # the osu-hydro "ls" parameter
        n = 2*ls + 1  # actual number of grid cells

        for fmt, f, arglist in [
                ('ed', fs.energy_density, [()]),
                ('u{}', fs.flow_velocity, [(1,), (2,)]),
                ('pi{}{}', fs.shear_tensor, [(1, 1), (1, 2), (2, 2)]),
        ]:
            for a in arglist:
                X = f(*a)

                if coarse:
                    X = X[::coarse, ::coarse]

                diff = X.shape[0] - n
                start = int(abs(diff)/2)

                if diff > 0:
                    # original grid is larger -> cut out middle square
                    s = slice(start, start + n)
                    X = X[s, s]
                elif diff < 0:
                    # original grid is smaller
                    #  -> create new array and place original grid in middle
                    Xn = np.zeros((n, n))
                    s = slice(start, start + X.shape[0])
                    Xn[s, s] = X
                    X = Xn

                X.tofile(fmt.format(*a) + '.dat')

        dt = dxy*dt_ratio

        run_cmd(
            'osu-hydro-pce',
            't0={} dt={} dxy={} nls={}'.format(args.tau_fs, dt, dxy, ls),
            *(hydro_args_coarse if coarse else hydro_args)
        )

        surface = np.fromfile('surface.dat', dtype='f8').reshape(-1, 21)
    
        return dict(
        zip(['x', 'sigma', 'v'], np.hsplit(surface, [3,6,8])),
        pi=dict(zip(['xx','xy','yy'],surface.T[11:14])),
        Pi=surface.T[15],
        Temp = surface.T[16],
        ed = surface.T[17],
        Tprop=surface.T[18],
        sd = surface.T[19],
        intersect = surface.T[20])


    def run_single_event(ic, event_number):
        """
        Run the initial condition event contained in HDF5 dataset object `ic`
        and save observables to `results`.

        """
        fs = freestream.FreeStreamer(ic, grid_max, args.tau_fs)

        # run coarse event on large grid and determine max radius
        #rmax = math.sqrt((
        #    run_hydro(fs, event_size=27, coarse=3)['x'][:, 1:3]**2
        #).sum(axis=1).max())
        #logging.info('rmax = %.3f fm', rmax)

        return run_hydro(fs, event_size=grid_max)

    # run each initial condition event and save results to file
    for n, ic in enumerate(initial_conditions, start=1):
        logging.info('starting event %d', n)
        
        if n == 1:
            profile = np.zeros(ic.shape)

        profile += ic
    
    profile /= n
        
    results = run_single_event(profile, 1)

    tvals = results['x'][:,0]
    xvals = results['x'][:,1]
    yvals = results['x'][:,2]
    rvals = np.sqrt(xvals**2 + yvals**2)
    
    """ Calculating fugacity at each time """    
    def fugacity(t):
        return 1 - np.exp((0.1 - t)/5.0)
    
    fugvals = fugacity(results['Tprop'])
    
    
    """ tempvals gives temperature in MeV, evals gives energy density in GeV/fm^3 """
    tempvals = 1000*results['Temp']
    evals = results['ed']
    intersect = results["intersect"]
    
    plt.rcdefaults()
    plt.style.use(['seaborn-darkgrid', 'seaborn-deep', 'seaborn-notebook'])
    plt.rcParams.update({
        'lines.linewidth': 1.5,
        'font.family': 'sans-serif',
        'font.sans-serif': ['Lato'],
        'mathtext.fontset': 'custom',
        'mathtext.default': 'it',
        'mathtext.rm': 'sans',
        'mathtext.it': 'sans:italic:medium',
        'mathtext.cal': 'sans',
        'pdf.fonttype': 42,
    })
    plt.figure(figsize=(7,5))
    
    """ 2D scatter plot of temperature (tempvals) over space and time: """
    plt.xlabel('x (fm)')
    plt.ylabel(r'$\tau$ (fm/c)')
    plt.scatter(rvals, tvals, c = tempvals, cmap=plt.cm.jet, vmin = 0, vmax = 400, edgecolors = 'face')
    plt.colorbar(label='T (MeV)')
    
    
    """ Plotting contours """
    r = np.linspace(0, 15, 300)
    t = np.linspace(0, 15, 300)
    plt.title(r'$T_{eq} = 0 fm/c$')
    
    temp = griddata((rvals,tvals),tempvals,(r[None,:],t[:,None]),method='linear')
    cs = plt.contour(r, t, temp, levels=[155, 200, 270, 350], colors='k', linewidths = 0.5)
    plt.clabel(cs, inline=0, fontsize=10)
    plt.savefig(temp_file)
    
    plt.clf()
    
    """ 2D scatter plot of fugacity (fugvals) over space and time: """
    plt.xlabel('x (fm)')
    plt.ylabel(r'$\tau$ (fm/c)')
    plt.scatter(rvals, tvals, c = fugvals, cmap=plt.cm.jet, vmin = 0, vmax = 1, edgecolors = 'face')
    plt.colorbar(label=r'$\lambda$')
    
    
    """ Plotting contours """
    r = np.linspace(0, 15, 300)
    t = np.linspace(0, 15, 300)
    plt.title(r'$T_{eq} = 0 fm/c$')
    
    fug = griddata((rvals,tvals),fugvals,(r[None,:],t[:,None]),method='linear')
    cs = plt.contour(r, t, fug, levels=[0.25, 0.5, 0.75, 0.9], colors='k', linewidths = 0.5)
    plt.clabel(cs, inline=0, fontsize=10)
    plt.savefig(fugacity_file)
    
    plt.clf()
    
    logging.info('event %d completed successfully', 1)

    return True


def main():
    args, checkpoint_ic = parse_args_checkpoint()

    if checkpoint_ic is None:
        # starting fresh -> truncate output files
        filemode = 'w'

        # must handle rank first since it affects paths
        if args.rankvar:
            rank = os.getenv(args.rankvar)
            if rank is None:
                sys.exit('rank variable {} is not set'.format(args.rankvar))

            if args.rankfmt:
                rank = args.rankfmt.format(int(rank))

            # append rank to path arguments, e.g.:
            #   /path/to/output.log  ->  /path/to/output/<rank>.log
            for a in ['results', 'logfile', 'particles', 'checkpoint']:
                value = getattr(args, a)
                if value is not None:
                    root, ext = os.path.splitext(value)
                    setattr(args, a, os.path.join(root, rank) + ext)
    else:
        # running checkpoint event -> append to existing files
        filemode = 'a'

    os.makedirs(os.path.dirname(args.results), exist_ok=True)

    if args.logfile is None:
        logfile_kwargs = dict(stream=sys.stdout)
    else:
        logfile_kwargs = dict(filename=args.logfile, filemode=filemode)
        os.makedirs(os.path.dirname(args.logfile), exist_ok=True)

    if args.particles is not None:
        os.makedirs(os.path.dirname(args.particles), exist_ok=True)

    if args.checkpoint is not None:
        os.makedirs(os.path.dirname(args.checkpoint), exist_ok=True)

    logging.basicConfig(
        level=getattr(logging, args.loglevel.upper()),
        format='[%(levelname)s@%(relativeCreated)d] %(message)s',
        **logfile_kwargs
    )
    logging.captureWarnings(True)

    start = datetime.datetime.now()
    if checkpoint_ic is None:
        logging.info('started at %s', start)
        logging.info('arguments: %r', args)
    else:
        logging.info(
            'restarting from checkpoint file %s at %s',
            args.checkpoint, start
        )

    # translate SIGTERM to KeyboardInterrupt
    signal.signal(signal.SIGTERM, signal.default_int_handler)
    logging.debug('set SIGTERM handler')

    @contextmanager
    def h5py_file():
        yield h5py.File(args.particles, 'w') if args.particles else None

    fugacity_file = os.path.abspath('Fugacity.png')
    temp_file = os.path.abspath('Temp.png')
    with \
            open(args.results, filemode + 'b',
                 buffering=args.buffering) as results_file, \
            open('profile.npy', 'rb') as profile, \
            h5py_file() as particles_file, \
            tempfile.TemporaryDirectory(
                prefix='hic-', dir=args.tmpdir) as workdir:
        os.chdir(workdir)
        logging.info('working directory: %s', workdir)

        try:
            status = run_events(args, profile, results_file, temp_file, fugacity_file, particles_file, checkpoint_ic)
        except KeyboardInterrupt:
            # after catching the initial SIGTERM or interrupt, ignore them
            # during shutdown -- this ensures everything will exit gracefully
            # in case of additional signals (short of SIGKILL)
            signal.signal(signal.SIGTERM, signal.SIG_IGN)
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            status = True
            logging.info(
                'interrupt or signal at %s, cleaning up...',
                datetime.datetime.now()
            )
            if args.checkpoint is not None:
                logging.info(
                    'current event saved in checkpoint file %s',
                    args.checkpoint
                )

    end = datetime.datetime.now()
    logging.info('finished at %s, %s elapsed', end, end - start)

    if not status:
        sys.exit(1)


if __name__ == "__main__":
    main()
